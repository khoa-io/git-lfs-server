name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-binaries-macos-amd64:
    name: "Build binaries for macOS AMD64"
    runs-on: macos-latest
    env:
      BUILD_OS: "macos"
      BUILD_ARCH: "amd64"
    steps:
      - uses: actions/checkout@v3
      - run: echo "BUILD_VERSION=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
      - uses: dart-lang/setup-dart@v1.3
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Create build folder
        run: mkdir -p build

      - name: Build git-lfs-authenticate
        run: dart compile exe bin/git_lfs_authenticate.dart --output build/git-lfs-authenticate
      - uses: actions/upload-artifact@v3
        with:
          name: git-lfs-authenticate-${{ env.BUILD_OS }}-${{ env.BUILD_ARCH }}-${{ env.BUILD_VERSION }}
          path: build/git-lfs-authenticate

      - name: Build git-lfs-server
        run: dart compile exe bin/git_lfs_server.dart --output build/git-lfs-server
      - uses: actions/upload-artifact@v3
        with:
          name: git-lfs-server-${{ env.BUILD_OS }}-${{ env.BUILD_ARCH }}-${{ env.BUILD_VERSION }}
          path: build/git-lfs-server

  build-binaries-linux-amd64:
    name: "Build binaries for Linux AMD64"
    runs-on: ubuntu-latest
    env:
      BUILD_OS: "linux"
      BUILD_ARCH: "amd64"
    steps:
      - uses: actions/checkout@v3
      - run: echo "BUILD_VERSION=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
      - uses: dart-lang/setup-dart@v1.3
        with:
          sdk: stable

      - name: Install dependencies
        run: dart pub get

      - name: Create build folder
        run: mkdir -p build

      - name: Build git-lfs-authenticate
        run: dart compile exe bin/git_lfs_authenticate.dart --output build/git-lfs-authenticate
      - uses: actions/upload-artifact@v3
        with:
          name: git-lfs-authenticate-${{ env.BUILD_OS }}-${{ env.BUILD_ARCH }}-${{ env.BUILD_VERSION }}
          path: build/git-lfs-authenticate

      - name: Build git-lfs-server
        run: dart compile exe bin/git_lfs_server.dart --output build/git-lfs-server
      - uses: actions/upload-artifact@v3
        with:
          name: git-lfs-server-${{ env.BUILD_OS }}-${{ env.BUILD_ARCH }}-${{ env.BUILD_VERSION }}
          path: build/git-lfs-server

  build-binaries-linux-arm64:
    name: "Build binaries for Linux ARM64"
    runs-on: ubuntu-latest
    env:
      BUILD_OS: "linux"
      BUILD_ARCH: "arm64"
    steps:
      - uses: actions/checkout@v3
      - name: Compute environment variables
        run: |
          echo "BUILD_VERSION=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
          echo "RUNNER_UID=`id -u`" >> $GITHUB_ENV
          echo "RUNNER_GID=`id -g`" >> $GITHUB_ENV

      # Run inside a linux/arm64 container
      - uses: uraimo/run-on-arch-action@v2
        name: Build ARM64 binaries
        with:
          arch: aarch64
          distro: ubuntu18.04
          setup: |
            mkdir -p "${PWD}/build"
            curl --connect-timeout 15 --retry 5 "https://storage.googleapis.com/dart-archive/channels/be/raw/latest/sdk/dartsdk-linux-arm64-release.zip" > "${HOME}/dartsdk.zip"
            unzip -o "${HOME}/dartsdk.zip" -d "${HOME}" > /dev/null
            if [ $? -ne 0 ]; then
              echo -e "::error::Download failed! Please check passed arguments."
              exit 1
            fi
          dockerRunArgs: |
            --volume "${PWD}:/source"
            --volume "${PWD}/build:/build"
            --volume "${HOME}/dart-sdk:/dart-sdk"
            --user "${{ env.RUNNER_UID }}:${{ env.RUNNER_GID }}"
          env: |
            PUB_CACHE: "${HOME}/.pub-cache"
            DART_HOME: "/dart-sdk"
          run: |
            cd /source
            ${DART_HOME}/bin/dart --version
            ${DART_HOME}/bin/dart pub get
            ${DART_HOME}/bin/dart compile exe bin/git_lfs_server.dart --output /build/git-lfs-server
            ${DART_HOME}/bin/dart compile exe bin/git_lfs_authenticate.dart --output /build/git-lfs-authenticate
      - uses: actions/upload-artifact@v3
        with:
          name: git-lfs-authenticate-${{ env.BUILD_OS }}-${{ env.BUILD_ARCH }}-${{ env.BUILD_VERSION }}
          path: build/git-lfs-authenticate

      - uses: actions/upload-artifact@v3
        with:
          name: git-lfs-server-${{ env.BUILD_OS }}-${{ env.BUILD_ARCH }}-${{ env.BUILD_VERSION }}
          path: build/git-lfs-server

  build-images:
    name: "Build images"
    needs:
      - build-binaries-linux-amd64
      - build-binaries-linux-arm64
    runs-on: ubuntu-latest
    env:
      BUILD_OS: "linux"
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - run: echo "BUILD_VERSION=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: Prepare build/linux/amd64/git-lfs-authenticate
        uses: actions/download-artifact@v3
        with:
          name: git-lfs-authenticate-${{ env.BUILD_OS }}-amd64-${{ env.BUILD_VERSION }}
          path: build/linux/amd64/git-lfs-authenticate
      - name: Prepare build/linux/amd64/git-lfs-server
        uses: actions/download-artifact@v3
        with:
          name: git-lfs-server-${{ env.BUILD_OS }}-amd64-${{ env.BUILD_VERSION }}
          path: build/linux/amd64/git-lfs-server

      - name: Prepare build/linux/arm64/git-lfs-authenticate
        uses: actions/download-artifact@v3
        with:
          name: git-lfs-authenticate-${{ env.BUILD_OS }}-arm64-${{ env.BUILD_VERSION }}
          path: build/linux/arm64/git-lfs-authenticate
      - name: Prepare build/linux/arm64/git-lfs-server
        uses: actions/download-artifact@v3
        with:
          name: git-lfs-server-${{ env.BUILD_OS }}-arm64-${{ env.BUILD_VERSION }}
          path: build/linux/arm64/git-lfs-server

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.actor }}/amz-git-mirroring:${{ env.BUILD_VERSION }}
            ghcr.io/${{ github.actor }}/amz-git-mirroring:latest
